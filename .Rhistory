)
})
# Total Products (Anzahl Produkte)
output$total_products <- renderValueBox({
data <- filtered_data()
valueBox(
formatC(length(unique(data$Description)), format = "f", big.mark = ",", digits = 0),
"Produkte",
icon = icon("tag"),
color = "purple"
)
})
# Zusammenhang zwischen Preis und Verkaufszahlen (Streudiagramm)
output$price_quantity_scatter <- renderPlotly({
data <- filtered_data()
plot_ly(data, x = ~UnitPrice, y = ~Quantity, type = 'scatter', mode = 'markers',
marker = list(size = 5, color = 'blue', opacity = 0.5)) %>%
layout(title = "Zusammenhang Preis und Verkaufszahlen",
xaxis = list(title = "Preis"),
yaxis = list(title = "Verkäufte Menge"))
})
# Preisverteilung als Histogramm und Boxplot
output$price_distribution_plot0 <- renderPlotly({
data <- filtered_data()
price_histogram <- plot_ly(data, x = ~UnitPrice, type = 'histogram', nbinsx = 50,
marker = list(color = 'rgba(255, 165, 0, 0.6)', line = list(color = 'orange'))) %>%
layout(title = "Preisverteilung der Produkte",
xaxis = list(title = "Preis"),
yaxis = list(title = "Häufigkeit"))
price_boxplot <- plot_ly(data, y = ~UnitPrice, type = 'box',
boxmean = TRUE,
marker = list(color = 'orange')) %>%
layout(title = "Preisverteilung (Boxplot)",
yaxis = list(title = "Preis (UnitPrice)"))
subplot(price_histogram, price_boxplot, nrows = 1, shareX = TRUE) %>%
layout(title = "Verteilung der Verkaufspreise")
})
# Preisverteilung als Histogramm und Boxplot mit logarithmischer Achse
output$price_distribution_plot <- renderPlotly({
data <- filtered_data()
# Entferne Null- und negative Werte
data <- data[data$UnitPrice > 0, ]
# Histogramm mit logarithmischer Achse
price_histogram <- plot_ly(data, x = ~UnitPrice, type = 'histogram', nbinsx = 50,
marker = list(color = 'rgba(255, 165, 0, 0.6)', line = list(color = 'orange'))) %>%
layout(title = "Preisverteilung der Produkte (logarithmische Skala)",
xaxis = list(title = "Preis (UnitPrice)", type = "log"),
yaxis = list(title = "Häufigkeit"))
# Boxplot (keine Log-Skalierung)
price_boxplot <- plot_ly(data, y = ~UnitPrice, type = 'box',
boxmean = TRUE,
marker = list(color = 'orange')) %>%
layout(title = "Preisverteilung (Boxplot)",
yaxis = list(title = "Preis (UnitPrice)"))
# Kombination
subplot(price_histogram, price_boxplot, nrows = 1, shareX = FALSE) %>%
layout(title = "Verteilung der Verkaufspreise")
})
# Top-Produkte (Kreisdiagramm mit Punkten)
output$top_products_plot <- renderPlotly({
data <- filtered_data()
top_products <- data %>%
group_by(Description) %>%
summarise(TotalRevenue = sum(TotalRevenue, na.rm = TRUE)) %>%
arrange(desc(TotalRevenue)) %>%
head(10)
plot_ly(top_products, x = ~Description, y = ~TotalRevenue, type = 'scatter', mode = 'markers',
marker = list(size = 15, color = 'lightgreen', symbol = 'circle')) %>%
layout(title = "Top-Produkte nach Umsatz",
xaxis = list(title = "Produkt"),
yaxis = list(title = "Umsatz"))
})
# Top-Länder (Cartogram)
output$top_countries_plot <- renderPlotly({
data <- filtered_data()
top_countries <- data %>%
group_by(Country) %>%
summarise(TotalRevenue = sum(TotalRevenue, na.rm = TRUE)) %>%
arrange(desc(TotalRevenue))
cartogram_data <- data.frame(region = top_countries$Country, value = top_countries$TotalRevenue)
plot_ly(
type = 'choropleth',
locations = cartogram_data$region,
locationmode = 'country names',
z = cartogram_data$value,
colorscale = 'YlOrRd',
colorbar = list(title = 'Umsatz')
) %>%
layout(
title = "Top-Länder nach Umsatz",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
coastlinecolor = 'rgb(255, 255, 255)',
projection = list(type = 'equirectangular') # Zeigt die gesamte Weltkarte
)
)
})
}
# Shiny App im Viewer starten
shinyApp(ui = ui, server = server)
runApp('Dashboard 3.R')
library(shiny); runApp('99-portfolio/Dashboard 3.R')
runApp('99-portfolio/Dashboard 3.R')
runApp('99-portfolio/Dashboard 3.R')
all_countries <- data.frame(
region = unique(map_data("world")$region),
value = 0
)
cartogram_data <- merge(all_countries, top_countries, by.x = "region", by.y = "Country", all.x = TRUE)
data <- filtered_data()
data <- filtered_data()
# Business Intelligence
# Anna-Lehna Grittke, Jacob Ruhnau
# Aufgabe 5 - gemeinsames Dashboard
setwd("/Users/jacob/data/dhbw/22_5-bi/99-portfolio")
# Lade die notwendigen Bibliotheken
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(dplyr)
library(ggplot2)
library(lubridate)
library(plotly)
library(choroplethrMaps)
library(maps)
retail_data <- read.csv("cleaned_data.csv", stringsAsFactors = FALSE, fileEncoding = "UTF-8")
retail_data$InvoiceDate <- ymd_hms(retail_data$InvoiceDate)
retail_data$Year <- year(retail_data$InvoiceDate)
# Berechnungen für KPIs
total_sales <- sum(retail_data$TotalRevenue, na.rm = TRUE)
total_quantity <- sum(retail_data$Quantity, na.rm = TRUE)
total_orders <- nrow(retail_data)
total_customers <- length(unique(retail_data$CustomerID))
# UI
ui <- dashboardPage(
dashboardHeader(title = "Online Retail Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
pickerInput("country_filter", "Land(er):",
choices = unique(retail_data$Country),
selected = unique(retail_data$Country),
options = pickerOptions(
actionsBox = TRUE,
size = 10,
selectedTextFormat = "count > 3"
),
multiple = TRUE
),
# Filter nach Jahren als Checkboxen
pickerInput("year_filter", "Jahr(e):",
choices = unique(retail_data$Year),
selected = unique(retail_data$Year),
options = pickerOptions(
actionsBox = TRUE,
size = 10,
selectedTextFormat = "count > 3"
),
multiple = TRUE
)
)
),
dashboardBody(
fluidRow(
# Vier Boxen für KPIs
valueBoxOutput("total_sales"),
valueBoxOutput("total_quantity"),
valueBoxOutput("total_customers"),
valueBoxOutput("total_products")
),
fluidRow(
# Vier Boxen für Grafiken
box(
title = "Zusammenhang zwischen Preis und Verkaufszahlen", width = 6, status = "primary", solidHeader = TRUE,
plotlyOutput("price_quantity_scatter")
),
box(
title = "Preisverteilung", width = 6, status = "primary", solidHeader = TRUE,
plotlyOutput("price_distribution_plot")
)
),
fluidRow(
box(
title = "Top-Produkte", width = 6, status = "primary", solidHeader = TRUE,
plotlyOutput("top_products_plot")
),
box(
title = "Top-Länder", width = 6, status = "primary", solidHeader = TRUE,
plotlyOutput("top_countries_plot")
)
)
)
)
# Server
server <- function(input, output) {
# Filtere die Daten nach den ausgewählten Ländern und Jahren
filtered_data <- reactive({
req(input$country_filter, input$year_filter)
retail_data %>%
filter(Country %in% input$country_filter, Year %in% input$year_filter)
})
# Total Sales (Gesamtumsatz)
output$total_sales <- renderValueBox({
data <- filtered_data()
valueBox(
formatC(sum(data$TotalRevenue, na.rm = TRUE), format = "f", big.mark = ",", digits = 2),
"Gesamtumsatz",
icon = icon("piggy-bank"),
color = "green"
)
})
# Total Quantity (Verkaufsmenge)
output$total_quantity <- renderValueBox({
data <- filtered_data()
valueBox(
formatC(sum(data$Quantity, na.rm = TRUE), format = "f", big.mark = ",", digits = 0),
"Verkäufte Menge",
icon = icon("shopping-cart"),
color = "yellow"
)
})
# Total Customers (Kundenanzahl)
output$total_customers <- renderValueBox({
data <- filtered_data()
valueBox(
formatC(length(unique(data$CustomerID)), format = "f", big.mark = ",", digits = 0),
"Kunden",
icon = icon("users"),
color = "blue"
)
})
# Total Products (Anzahl Produkte)
output$total_products <- renderValueBox({
data <- filtered_data()
valueBox(
formatC(length(unique(data$Description)), format = "f", big.mark = ",", digits = 0),
"Produkte",
icon = icon("tag"),
color = "purple"
)
})
# Zusammenhang zwischen Preis und Verkaufszahlen (Streudiagramm mit Regressionslinie)
output$price_quantity_scatter <- renderPlotly({
data <- filtered_data()
# Streudiagramm
scatter_plot <- plot_ly(data, x = ~UnitPrice, y = ~Quantity, type = 'scatter', mode = 'markers',
marker = list(size = 5, color = 'blue', opacity = 0.5)) %>%
layout(title = "Zusammenhang Preis und Verkaufszahlen",
xaxis = list(title = "Preis"),
yaxis = list(title = "Verkäufte Menge"))
# Regressionslinie hinzufügen
model <- lm(Quantity ~ UnitPrice, data = data)
scatter_plot <- scatter_plot %>%
add_lines(x = ~UnitPrice, y = fitted(model), line = list(color = 'red'), name = 'Regressionslinie')
scatter_plot
})
# Preisverteilung als Histogramm und Boxplot
output$price_distribution_plot <- renderPlotly({
data <- filtered_data()
price_histogram <- plot_ly(data, x = ~UnitPrice, type = 'histogram', nbinsx = 50,
marker = list(color = 'rgba(255, 165, 0, 0.6)', line = list(color = 'orange'))) %>%
layout(title = "Preisverteilung der Produkte",
xaxis = list(title = "Preis"),
yaxis = list(title = "Häufigkeit"))
price_boxplot <- plot_ly(data, y = ~UnitPrice, type = 'box',
boxmean = TRUE,
marker = list(color = 'orange')) %>%
layout(title = "Preisverteilung (Boxplot)",
yaxis = list(title = "Preis (UnitPrice)"))
subplot(price_histogram, price_boxplot, nrows = 1, shareX = TRUE) %>%
layout(title = "Verteilung der Verkaufspreise")
})
# Top-Produkte
output$top_products_plot <- renderPlotly({
data <- filtered_data()
top_products <- data %>%
group_by(Description) %>%
summarise(TotalRevenue = sum(TotalRevenue, na.rm = TRUE)) %>%
arrange(desc(TotalRevenue)) %>%
head(10)
plot_ly(top_products, x = ~Description, y = ~TotalRevenue, type = 'scatter', mode = 'markers',
marker = list(size = 15, color = 'lightgreen', symbol = 'circle')) %>%
layout(title = "Top-Produkte nach Umsatz",
xaxis = list(title = "Produkt"),
yaxis = list(title = "Umsatz"))
})
# Top-Länder
output$top_countries_plot <- renderPlotly({
data <- filtered_data()
top_countries <- data %>%
group_by(Country) %>%
summarise(TotalRevenue = sum(TotalRevenue, na.rm = TRUE)) %>%
arrange(desc(TotalRevenue))
# Liste aller Länder der Welt
all_countries <- data.frame(
region = unique(map_data("world")$region),
value = 0
)
# Zusammenführen der Daten
cartogram_data <- merge(all_countries, top_countries, by.x = "region", by.y = "Country", all.x = TRUE)
cartogram_data$value[is.na(cartogram_data$value)] <- 0
plot_ly(
type = 'choropleth',
locations = cartogram_data$region,
locationmode = 'country names',
z = cartogram_data$value,
colorscale = 'YlOrRd',
colorbar = list(title = 'Umsatz')
) %>%
layout(
title = "Top-Länder nach Umsatz",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
coastlinecolor = 'rgb(255, 255, 255)',
projection = list(type = 'equirectangular') # Zeigt die gesamte Weltkarte
)
)
})
}
# Shiny App im Viewer starten
shinyApp(ui = ui, server = server)
# Filtere die Daten nach den ausgewählten Ländern und Jahren
filtered_data <- reactive({
req(input$country_filter, input$year_filter)
retail_data %>%
filter(Country %in% input$country_filter, Year %in% input$year_filter)
})
data <- filtered_data()
data <- retail_data
top_countries <- data %>%
group_by(Country) %>%
summarise(TotalRevenue = sum(TotalRevenue, na.rm = TRUE)) %>%
arrange(desc(TotalRevenue))
View(all_countries)
View(all_countries)
cartogram_data <- merge(all_countries, top_countries, by.x = "region", by.y = "Country", all.x = TRUE)
View(cartogram_data)
View(cartogram_data)
all_countries <- data.frame(
region = unique(map_data("world")$region),
TotalRevenue = 0
)
cartogram_data <- merge(all_countries, top_countries, by.x = "region", by.y = "Country", all.x = TRUE)
View(cartogram_data)
View(cartogram_data)
cartogram_data$value[is.na(cartogram_data$TotalRevenue)] <- 0
View(all_countries)
View(all_countries)
View(cartogram_data)
View(cartogram_data)
cartogram_data <- merge(all_countries, top_countries, by = "Country", all.x = TRUE)
cartogram_data <- merge(all_countries, top_countries, by.x = "region", by.y = "Country", all.x = TRUE)
data <- retail_data
top_countries <- data %>%
group_by(Country) %>%
summarise(TotalRevenue = sum(TotalRevenue, na.rm = TRUE)) %>%
arrange(desc(TotalRevenue))
# Liste aller Länder der Welt
all_countries <- data.frame(
region = unique(map_data("world")$region),
value = 0
)
# Zusammenführen der Daten
cartogram_data <- merge(all_countries, top_countries, by.x = "region", by.y = "Country", all.x = TRUE)
cartogram_data$value[is.na(cartogram_data$TotalRevenue)] <- 0
View(cartogram_data)
cartogram_data$value[is.na(cartogram_data$TotalRevenue)] <- 0
cartogram_data$TotalRevenue[is.na(cartogram_data$TotalRevenue)] <- 0
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
library(shiny); runApp('99-portfolio/Dashboard 3.R')
# Business Intelligence
# Anna-Lehna Grittke - 8322504
# Aufgabe 1
setwd("/Users/jacob/data/dhbw/22_5-bi/99-portfolio")
library(dplyr)
library(readr)
library(DBI)
library(RSQLite)
# 1. Extraktion: Daten aus CSV-Datei einlesen
file_path <- "OnlineRetail.csv"
data <- read_csv(file_path)
# 2. Transformation: Daten bereinigen
# Entfernen von fehlenden Werten
cleaned_data <- data %>%
filter(!is.na(InvoiceNo) & !is.na(StockCode) & !is.na(Description) & !is.na(CustomerID))
# Sicherstellen, dass Quantity und UnitPrice positiv sind
cleaned_data <- cleaned_data %>%
filter(Quantity > 0 & UnitPrice > 0)
# Spalten umformatieren
cleaned_data$InvoiceDate <- ymd_hms(cleaned_data$InvoiceDate)
# Berechnung wichtiger Kennzahlen
# Gesamtumsatz (TotalRevenue)
cleaned_data <- cleaned_data %>%
mutate(TotalRevenue = Quantity * UnitPrice)
# Aggregierte Kennzahlen: Gesamtumsatz pro Land
revenue_by_country <- cleaned_data %>%
group_by(Country) %>%
summarise(
TotalRevenue = sum(TotalRevenue),
TotalQuantity = sum(Quantity),
NumberOfTransactions = n_distinct(InvoiceNo)
)
# 3. Laden: Ergebnisse speichern
# a) In einer SQLite-Datenbank
# Verbindung zur SQLite-Datenbank herstellen
conn <- dbConnect(SQLite(), "sales_data.db")
# Daten in die Datenbank schreiben
dbWriteTable(conn, "cleaned_data", cleaned_data, overwrite = TRUE)
dbWriteTable(conn, "revenue_by_country", revenue_by_country, overwrite = TRUE)
# Verbindung schließen
dbDisconnect(conn)
# b) In einer CSV-Datei
write_csv(cleaned_data, "cleaned_data.csv")
write_csv(revenue_by_country, "revenue_by_country.csv")
# Abschlussmeldung
cat("ETL-Prozess abgeschlossen. Die Daten wurden bereinigt, analysiert und gespeichert.")
# Abschlussmeldung
cat("ETL-Prozess abgeschlossen. Die Daten wurden bereinigt, analysiert und gespeichert.")
# Business Intelligence
# Anna-Lehna Grittke - 8322504
# Aufgabe 1
setwd("/Users/jacob/data/dhbw/22_5-bi/99-portfolio")
library(dplyr)
library(readr)
library(DBI)
library(RSQLite)
# 1. Extraktion: Daten aus CSV-Datei einlesen
file_path <- "OnlineRetail.csv"
data <- read_csv(file_path)
# 2. Transformation: Daten bereinigen
# Entfernen von fehlenden Werten
cleaned_data <- data %>%
filter(!is.na(InvoiceNo) & !is.na(StockCode) & !is.na(Description) & !is.na(CustomerID))
# Sicherstellen, dass Quantity und UnitPrice positiv sind
cleaned_data <- cleaned_data %>%
filter(Quantity > 0 & UnitPrice > 0)
# Spalten umformatieren
cleaned_data$InvoiceDate <- ymd_hms(cleaned_data$InvoiceDate)
# Berechnung wichtiger Kennzahlen
# Gesamtumsatz (TotalRevenue)
cleaned_data <- cleaned_data %>%
mutate(TotalRevenue = Quantity * UnitPrice)
# Aggregierte Kennzahlen: Gesamtumsatz pro Land
revenue_by_country <- cleaned_data %>%
group_by(Country) %>%
summarise(
TotalRevenue = sum(TotalRevenue),
TotalQuantity = sum(Quantity),
NumberOfTransactions = n_distinct(InvoiceNo)
)
# 3. Laden: Ergebnisse speichern
# a) In einer SQLite-Datenbank
# Verbindung zur SQLite-Datenbank herstellen
conn <- dbConnect(SQLite(), "sales_data.db")
# Daten in die Datenbank schreiben
dbWriteTable(conn, "cleaned_data", cleaned_data, overwrite = TRUE)
dbWriteTable(conn, "revenue_by_country", revenue_by_country, overwrite = TRUE)
# Verbindung schließen
dbDisconnect(conn)
# b) In einer CSV-Datei
write_csv(cleaned_data, "cleaned_data.csv")
write_csv(revenue_by_country, "revenue_by_country.csv")
# Abschlussmeldung
cat("ETL-Prozess abgeschlossen. Die Daten wurden bereinigt, analysiert und gespeichert.")
View(cleaned_data)
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
View(top_countries)
View(cleaned_data)
View(cleaned_data)
View(cleaned_data)
View(cleaned_data)
View(cleaned_data)
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
install.packages("DT")
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 3.R')
runApp('Dashboard 25-01-12.R')
library(shiny); runApp('99-portfolio/Dashboard 25-01-12.R')
